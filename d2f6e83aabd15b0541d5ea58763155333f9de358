{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4cfdce4b_a1d87e2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "Good stuff @Jacek,\nminor things to fix and then I think we should try to get some benchmarks?\nWDYT?",
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f27ce07_fe4b4f76",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "as opposed to",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 20
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4d46fb8_472a26ce",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f27ce07_fe4b4f76",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 20
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00ed5f8c_3bd4078c",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "do we need to synchronize here? keys is already a synchronized set",
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23fbd669_f0019e7f",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "Yes we do, here is the description from the `Collections.synchronizedSet`:\n\n```\n(...) It is imperative that the user manually synchronize on the returned collection when traversing it via Iterator, Spliterator or Stream (...)\nFailure to follow this advice may result in non-deterministic behavior.\n```\n\nOn the bright side I have rewritten it so that filtering is done in synchronised manner and removal happens outside the synchronize block ;)",
      "parentUuid": "00ed5f8c_3bd4078c",
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc21be06_37f71d26",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-16T17:02:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "23fbd669_f0019e7f",
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72ba94c_a540a681",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "nit: use getKey() getter instead?",
      "range": {
        "startLine": 90,
        "startChar": 36,
        "endLine": 90,
        "endChar": 39
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85dc808c_94d2473c",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b72ba94c_a540a681",
      "range": {
        "startLine": 90,
        "startChar": 36,
        "endLine": 90,
        "endChar": 39
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a847df28_65e01f1f",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T15:34:14Z",
      "side": 1,
      "message": "This unfortuntely is not working (and some tests are failing because of it).\nkey.getKey() returns a T, but the consumer that wants to remove the element from chronicleMap needs a `KeyWrapper`.\n\nI think evictColEntries needs to be something like:\n\n```\n  private void evictColdEntries() {\n    while (runningOutOfFreeSpace() \u0026\u0026 keysIndex.removeAndConsumeLruKey(kValue -\u003e store.remove(new KeyWrapper\u003c\u003e(kValue)))) {}\n  }\n  ```",
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed08e1a8_4825ed24",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "fixed it for both `removeAndConsumeKeysOlderThan` and `removeAndConsumeLruKey` calls from the `ChronicleMapCacheImpl`",
      "parentUuid": "a847df28_65e01f1f",
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2828aa44_274bb533",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "I think this could be rewritten more succinctly as:\n\n```\n  boolean removeAndConsumeLruKey(Consumer\u003cT\u003e consumer) {\n    return keys.stream().findFirst().map( key -\u003e {\n      consumer.accept(key.getKey());\n      return keys.remove(key);\n    }).orElse(false);\n  }\n```",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 107,
        "endChar": 3
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b802915_05a6401c",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "it still needs the `synchronized` block (for the reason mentioned above), but I have used fluent Optional interface as suggested with the exception of not relying on `remove` operation result but result with `true` if first element was found at the time of searching",
      "parentUuid": "2828aa44_274bb533",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 107,
        "endChar": 3
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c102d11_fe94f0ef",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-16T17:02:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1b802915_05a6401c",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 107,
        "endChar": 3
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baad550b_e92d16b4",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndexTest.java",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "Nit: I would personally remove the given/when/then comments.",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 12
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eeb00c3_a62a2235",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndexTest.java",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baad550b_e92d16b4",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 12
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bddb896_91e8d2b1",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndexTest.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-05-13T14:49:24Z",
      "side": 1,
      "message": "Why not passing a mocked consumer here and then assert that it was called with the right argument?\n\nIf `removeAndConsumeKeysOlderThan` never called Consumer that failing assertion would never be executed.\nWe would fail only at L93, whilst we could have failed already earlier.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 9
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02350f5b_b569ddd2",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/CacheKeysIndexTest.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-05-16T12:59:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bddb896_91e8d2b1",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 9
      },
      "revId": "d2f6e83aabd15b0541d5ea58763155333f9de358",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}