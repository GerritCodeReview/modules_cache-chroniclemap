{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "33a7765b_03caff48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-08-11T06:27:05Z",
      "side": 1,
      "message": "nit: typo, should be \u0027CacheSerializer\u0027",
      "range": {
        "startLine": 7,
        "startChar": 17,
        "endLine": 7,
        "endChar": 31
      },
      "revId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bca37fa_df90d27f",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/KeyWrapperMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-08-09T16:39:29Z",
      "side": 1,
      "message": "`CacheSerializers.getKeySerializer(name)` throws when the serializer is not defined for `name`.\n\nThis used to throw when attempting to read the value.\nWhat\u0027s the implication of doing this in the constructor?\n\nDoes it mean that gerrit won\u0027t start?\n\n\nIf so,this should be documented as a behavioural change",
      "revId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "219cfb74_c4105563",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/KeyWrapperMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-08-11T06:27:05Z",
      "side": 1,
      "message": "Yeap this will be the case.\nHaving said that I don\u0027t believe that this is the case that can happen under any circumstances:\n* if `PersistentCacheFactory` implementation is available (if not then it doesn\u0027t matter as that would mean that neither H2 nor Chroniclemap modules were loaded) then `PersistentCacheProvider.get()` ensures that serializers are part of persistent cache definition IOW if persistency is available then serializers are defined or Gerrit will not start\n* serializers\u0027 registration is part of `ChronicleMapCacheImpl.createOrRecoverStore` step IOW if cache is defined then it has its serializers registered\n* considering above being `true` IMHO there is no chance for defined persistent cache to NOT have\n\n@Tony would that makes sense for you? I can\u0027t actually imagine the scenario that it would currently happen unless there are changes in Gerrit core that would allow persistent caches without serializers (double checked `master` that this is not the case ;)) ...",
      "parentUuid": "0bca37fa_df90d27f",
      "revId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e7862ee_28d6ded7",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/KeyWrapperMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-08-11T07:03:42Z",
      "side": 1,
      "message": "Yes I agree, this _should_ never happen.\nIt also should have never happened with the previous implementation.\n\nMy concern was about \"do we want to stop gerrit if such a case arise?\", as opposed to \"do we want to stop using that cache if such a case arise?\" (which was the case in the previous implementation).\n\nThinking twice about this I believe stopping gerrit is probably the safest thing to do, as something very strange is happening.\n\nThis is a change of behaviour, but given the previous behaviour was not documented, I think we are good to go with this.\n\nThanks Jacek",
      "parentUuid": "219cfb74_c4105563",
      "revId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config -onlyextensions:txt -onlyextensions:md"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config -onlyextensions:txt -onlyextensions:md"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","onlyextensions:txt","onlyextensions:md"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f64f1897d69cf89ee1449b308f533998fb87e49e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}