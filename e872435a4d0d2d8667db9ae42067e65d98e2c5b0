{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eb2c3991_e0ef64ae",
        "filename": "BUILD",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T16:50:23Z",
      "side": 1,
      "message": "@davido: Is there a shorter form to add this new test dependency?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 130
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cc260a0_f86eb8d8",
        "filename": "BUILD",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T17:16:49Z",
      "side": 1,
      "message": "I added comment on this BUILD file you added. Another option would be to add this new rule here, in this root file:\n\n  java_library(\n    name \u003d \"chroniclemap-test-lib\",\n    testonly \u003d True,\n    srcs \u003d [\"src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/TestPersistentCacheDef.java\"],\n    visibility \u003d [\"//visibility:public\"],\n    deps \u003d PLUGIN_DEPS + PLUGIN_TEST_DEPS,\n  )\n\nand use it like this: \":chroniclemap-test-lib\".",
      "parentUuid": "eb2c3991_e0ef64ae",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 130
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efe852df_7bb58521",
        "filename": "BUILD",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:02:11Z",
      "side": 1,
      "message": "I understand, thanks!\nIs this better than the current approach? Do we have any best practices when it comes to this sort of things?",
      "parentUuid": "7cc260a0_f86eb8d8",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 130
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "860bec0f_e25331a7",
        "filename": "BUILD",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T19:26:29Z",
      "side": 1,
      "message": "There is one known issue with Bazel java_test rule: it should separated utility classes in a different library, see: [1].\n\n[1] https://github.com/bazelbuild/bazel/issues/2539",
      "parentUuid": "efe852df_7bb58521",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 130
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8edb8e00_e0223724",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-28T17:55:29Z",
      "side": 1,
      "message": "isInMemoryCache? The methods that return a boolean are typically more readable if they have a \"to be\" verb in the method name.",
      "range": {
        "startLine": 129,
        "startChar": 25,
        "endLine": 129,
        "endChar": 38
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0df6c974_9d44d205",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:17:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8edb8e00_e0223724",
      "range": {
        "startLine": 129,
        "startChar": 25,
        "endLine": 129,
        "endChar": 38
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee1369c1_17777693",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 130,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-28T17:55:29Z",
      "side": 1,
      "message": "This is not going to change for every cache: can we use the same pattern used in H2CacheFactory?\n\nP.S. You see my point about doing that in Gerrit, isn\u0027t it? We have to basically copy\u0026paste H2CacheFactory code here, and we should do it consistently IMHO.",
      "range": {
        "startLine": 130,
        "startChar": 11,
        "endLine": 130,
        "endChar": 78
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b5549c7_9bf789f1",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 130,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:17:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ee1369c1_17777693",
      "range": {
        "startLine": 130,
        "startChar": 11,
        "endLine": 130,
        "endChar": 78
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83d2cbd3_2c2177e6",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-28T17:55:29Z",
      "side": 1,
      "message": "nit: unrelated change?",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d6074ed_cfa55b45",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:17:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "83d2cbd3_2c2177e6",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fb65ce3_3450a51c",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/BUILD",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T17:16:49Z",
      "side": 1,
      "message": "Why you added this new BUILD file only for this one package? and not just add this rule in the main BUILD file in root directory of this plugin?",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a098570_5d525ccb",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/BUILD",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-28T17:55:29Z",
      "side": 1,
      "message": "nit: unrelated change. Can you extract into its own change?",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c07dd66_d12be837",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/BUILD",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:02:11Z",
      "side": 1,
      "message": "See my explanation regarding the introduction of a lib package to host all test libraries, not sure if it makes sense.",
      "parentUuid": "7fb65ce3_3450a51c",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5061c94f_98c1cba2",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/BUILD",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:17:57Z",
      "side": 1,
      "message": "If we keep the TestPersistentCacheDef approach, this BUILD file is needed to allow both unit and acceptance test to use it as a dependency",
      "parentUuid": "0a098570_5d525ccb",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a36ae2a_388ec29a",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/BUILD",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T19:26:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c07dd66_d12be837",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "468eb9f1_8a01a814",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/BUILD",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-29T18:29:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5061c94f_98c1cba2",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "230a4461_f8a0aafb",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-28T17:55:29Z",
      "side": 1,
      "message": "This looks a bit overkill IMHO: we just need to get a fake implementation of a PersistentCacheDef that responds to name() and configKey() methods: why don\u0027t we just use a mock for it?\n\nWe would avoid:\n- brand-new class\n- BUILD file to create a library",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5505203_ae8b1c81",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:17:57Z",
      "side": 1,
      "message": "\u003e This looks a bit overkill IMHO: we just need to get a fake implementation of a PersistentCacheDef that responds to name() and configKey() methods: why don\u0027t we just use a mock for it?\n\u003e \n\u003e We would avoid:\n\u003e - brand-new class\n\nI would have not created this class just for this change.\nBut this class already existed, used by unit tests.\nThis change only moves it to a common package where it can be used by both. \n\n\u003e - BUILD file to create a library",
      "parentUuid": "230a4461_f8a0aafb",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65f56d8c_f5872954",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-28T18:25:07Z",
      "side": 1,
      "message": "It was a public static class anyway, you can instantiate it from the IT test without having to create a library anyway. Or also you can just use a mock in the IT in the new place, up to you.\n\nYou could also just create a hierarchy of tests with a base class and have it there, it\u0027s up to you. Just defining a library with another BUILD file is way too much IMHO.",
      "parentUuid": "f5505203_ae8b1c81",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ae4d1b_bf9ff42c",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T21:04:54Z",
      "side": 1,
      "message": "I moved the java_library definition in root BUILD file, so it\u0027s eliminated now.",
      "parentUuid": "65f56d8c_f5872954",
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bdf2924_0035dc7d",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T17:16:49Z",
      "side": 1,
      "message": "Why add yet another lib package?  Can\u0027t it just be: com.googlesource.gerrit.modules.cache.chroniclemap ?\n\nIn code-owners plugin we have:\n\n javatests/com/google/gerrit/plugins/codeowners/acceptance/\n\nor in gerrit itself we have:\n\n  java/com/google/gerrit/testing/\n\nor even:\n\n  java/com/google/gerrit/acceptance/",
      "range": {
        "startLine": 14,
        "startChar": 59,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4519ccc0_1f290816",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T18:02:11Z",
      "side": 1,
      "message": "If I take one of your examples, \"java/com/google/gerrit/testing/\" does the same thing no?\n\nThe \"com.google.gerrit.testing\" package has been introduced to host all test utils, in a single target.\n\nMy intention was the same, to have a \"com.googlesource.gerrit.modules.cache.chroniclemap.lib\" to host all test dependencies, in one target.\n\nIf I had done this in the main package, I would have needed to address one by one the libraries I want, or explicitly exclude any *IT or *Test classes right?\n\nHaving this in a sub package allows to just use *.java as source, because everything in that package will be a library.\n\nWDYT?",
      "parentUuid": "1bdf2924_0035dc7d",
      "range": {
        "startLine": 14,
        "startChar": 59,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c09b770_f7ffb04c",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-28T19:26:29Z",
      "side": 1,
      "message": "\u003e Having this in a sub package allows to just use *.java as source, because everything in that package will be a library.\n\nI see, but it\u0027s only one single source, so why don\u0027t just specify it as such? And if it start growing, we could still exclude non wanted dependencies. That\u0027s what replication plugin is doing for its test_util library:\n\n  java_library(\n    name \u003d \"replication_util\",\n    testonly \u003d True,\n    srcs \u003d glob(\n        [\"src/test/java/**/*.java\"],\n        exclude \u003d [\"src/test/java/**/*Test.java\"],\n    ),\n    deps \u003d PLUGIN_TEST_DEPS + PLUGIN_DEPS + [\n        \":replication__plugin\",\n    ],\n  )\n\nI went ahead and moved the java_library rule into main BUILD file.",
      "parentUuid": "4519ccc0_1f290816",
      "range": {
        "startLine": 14,
        "startChar": 59,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e21965ea_3742e6e2",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/lib/TestPersistentCacheDef.java",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-02-04T07:31:32Z",
      "side": 1,
      "message": "SGTM for now, we can get rid of the library in a follow-up change. I don\u0027t think we needed that at all, but it\u0027s fine for now and can be addressed later.",
      "parentUuid": "7c09b770_f7ffb04c",
      "range": {
        "startLine": 14,
        "startChar": 59,
        "endLine": 14,
        "endChar": 62
      },
      "revId": "e872435a4d0d2d8667db9ae42067e65d98e2c5b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}