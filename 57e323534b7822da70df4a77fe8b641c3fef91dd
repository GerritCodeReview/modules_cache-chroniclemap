{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ac0939a7_970b9d0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "Shall we create a monorail issue for this?\nIt seems quite substantial change",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d27e8cd_6d013a37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T18:10:18Z",
      "side": 1,
      "message": "Sure Issue 15036 raised.",
      "parentUuid": "ac0939a7_970b9d0a",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fde005d_fc99b934",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheDefProxy.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "2021",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b490d9d0_badf3d05",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheDefProxy.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T18:10:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fde005d_fc99b934",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14cb874b_3d0fef6d",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheDefProxy.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "TimedValue",
      "range": {
        "startLine": 57,
        "startChar": 44,
        "endLine": 57,
        "endChar": 55
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc70a92_469d1a5c",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheDefProxy.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T18:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14cb874b_3d0fef6d",
      "range": {
        "startLine": 57,
        "startChar": 44,
        "endLine": 57,
        "endChar": 55
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1ac979d_3db84bc1",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "I understand why memcache is optional:\n- We need a store in order to create is (so that we have to set it in two steps with the setMem)\n- In some scenarios we might not want to populate the in-memory cache at all. For example during migrations, etc (i.e.AudtoAdjust and MigrationServlet)\n\nHowever, I think this now creates some duplication in which a similar retrieval logic needs to be implemented in two places:\n- ChronicleMapCacheLoaderImpl (used by the memory cache) \n- ChronicleMapCacheImpl itself (when inmemory cache is not defined).\n\nDepending on where the value is loaded from (in-memory vs directly from chroniclemap) we either do or don\u0027t increment metrics, or invalidate entries.\n\nAm I reading this wrong or we should be looking at consolidating these sparse loading implementations?",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 40
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "872420e1_e7374329",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T18:14:05Z",
      "side": 1,
      "message": "True, that logic is now split into two parts. Let me fix all the tests and I\u0027ll definitely DRY that out before the final review and merge.",
      "parentUuid": "e1ac979d_3db84bc1",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 40
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85e5276b_41e954a9",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "nit: unrelated?",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8a87a2a_f79dfefd",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T18:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85e5276b_41e954a9",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b61436ec_667c9436",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "nit: unrelated",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 117,
        "endChar": 3
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9005d297_4c145f78",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T18:14:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b61436ec_667c9436",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 117,
        "endChar": 3
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "278671bc_8406adbb",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "nit: can use method reference",
      "range": {
        "startLine": 183,
        "startChar": 31,
        "endLine": 183,
        "endChar": 55
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "897cd35b_7733b4de",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "278671bc_8406adbb",
      "range": {
        "startLine": 183,
        "startChar": 31,
        "endLine": 183,
        "endChar": 55
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c09481dd_608062c4",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "nit: can be private",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e747509_f915f8fb",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c09481dd_608062c4",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a2d5cd1_073ca4d2",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "This is trying to get the value from memcache and, when not available it tries to get it from the store.\n\nIsn\u0027t this what the loader is for?\nIs this because mem can be null?\n\nIf so, perhaps we should be more explicit in the if condition: if `mem` was NOT null and the item was NOT present in cache, we would try one more time to get it from store even though we know we will not find it right?",
      "range": {
        "startLine": 189,
        "startChar": 4,
        "endLine": 191,
        "endChar": 78
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ee7f462_eb3b6176",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "\u003e This is trying to get the value from memcache and, when not available it tries to get it from the store.\n\u003e \n\u003e Isn\u0027t this what the loader is for?\n\nThe loader would load it from the loader function when it is not present.\nThis method instead returns it ONLY if it was already loaded from the loader function.\n\n\u003e Is this because mem can be null?\n\nAlso yes, mem can be null and, in that case, we need to get it from the store directly.\n\n\u003e If so, perhaps we should be more explicit in the if condition: if `mem` was NOT null and the item was NOT present in cache, we would try one more time to get it from store even though we know we will not find it right?\n\nIsn\u0027t the flapMap already doing that?",
      "parentUuid": "1a2d5cd1_073ca4d2",
      "range": {
        "startLine": 189,
        "startChar": 4,
        "endLine": 191,
        "endChar": 78
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfe7b6e6_f9b60b65",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T19:58:24Z",
      "side": 1,
      "message": "I can think of 4 possible states, resulting in different values for the variable `h`:\n\n1 - mem is NOT defined \u003d\u003e h is NOT defined\n2 - mem IS defined \u0026\u0026 objKey is already in mem cache (loading is not attempted) \u003d\u003e h is defined\n3 - mem IS defined \u0026\u0026 objKey is not in cache \u0026\u0026 the loader successfully gets it from store \u003d\u003e h is defined.\n4 - mem IS defined \u0026\u0026 objKey is NOT in cache, the loader tries to get it from store, it\u0027s not there either (getIfPresent returns null) \u003d\u003e h is NOT defined.\n\nGiven the above, we can endup in the or() block due to 1) or 4).\n\nAren\u0027t we always destined to fail if we ended up in the or() due to point 4)?\nWe know that the objKey will not be in store right?\n\nSo in this case, we will always try to get the object from the store twice: one, failing from point 4 and one, failing in the or() block.",
      "parentUuid": "3ee7f462_eb3b6176",
      "range": {
        "startLine": 189,
        "startChar": 4,
        "endLine": 191,
        "endChar": 78
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1ef4747_5bf0d038",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "Shouldn\u0027t we update these even when the item is retrieved by memory cache?\nI don\u0027t see the equivalent in ChronicleMapCacheLoaderImpl",
      "range": {
        "startLine": 195,
        "startChar": 14,
        "endLine": 196,
        "endChar": 41
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db0b087e_e97b23ae",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "You touched an important point: the hotEntries and hitCounts.\n\nI believe the Guava caches already have something out there, so we can just reuse what is there. With regards to the hotEntries, what is in Guava is by definition \"hot\u0027 isn\u0027t it? Possibly we don\u0027t need the hotEntries anymore, WDYT?",
      "parentUuid": "b1ef4747_5bf0d038",
      "range": {
        "startLine": 195,
        "startChar": 14,
        "endLine": 196,
        "endChar": 41
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4cc3874_ccd47682",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T19:58:24Z",
      "side": 1,
      "message": "\u003e You touched an important point: the hotEntries and hitCounts.\n\u003e \n\u003e I believe the Guava caches already have something out there, so we can just reuse what is there.\n\noh cool, let\u0027s have a look.\n\n\u003e With regards to the hotEntries, what is in Guava is by definition \"hot\u0027 isn\u0027t it? Possibly we don\u0027t need the hotEntries anymore, WDYT?\n\nYes, that would be cool if we could remove it.\nI also feel there is one too many in-memory caches here now.\nThe thing is that we modeled hotEntries as a LRU cache whilst Guava cache is not ordered, so I am not sure we could just replace it as-is.",
      "parentUuid": "db0b087e_e97b23ae",
      "range": {
        "startLine": 195,
        "startChar": 14,
        "endLine": 196,
        "endChar": 41
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b403ee87_8148cc49",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "if mem was present, wouldn\u0027t the value already be put in memory as a result of\n\n```\n asLoadingCache.get(key)\n```\n\n?",
      "range": {
        "startLine": 224,
        "startChar": 8,
        "endLine": 224,
        "endChar": 52
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9880c4e8_b2996f05",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "Not necessarily: if mem was present but it *was not* a loading cache, then the block between L209 and L217 isn\u0027t executed. When we then load it from the store we need to add it to mem manually.",
      "parentUuid": "b403ee87_8148cc49",
      "range": {
        "startLine": 224,
        "startChar": 8,
        "endLine": 224,
        "endChar": 52
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "523ef003_13fcef77",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "I believe this is now wrong.\n\nWe used to be able to get here only when loader was null, but now any cache miss will result in an UnsupportedOperationException?",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 232,
        "endChar": 78
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0dbb3ed2_9cf88547",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "You are right: this should be an exception for cache miss.",
      "parentUuid": "523ef003_13fcef77",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 232,
        "endChar": 78
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e7edb31_762876f3",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheLoaderImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "Missing header",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0755e87f_de02cd04",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheLoaderImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e7edb31_762876f3",
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b01497ef_cd45f1a8",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheLoaderImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "nit: unneeded, will be inferred",
      "range": {
        "startLine": 51,
        "startChar": 27,
        "endLine": 51,
        "endChar": 28
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d3672b8_521268a7",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheLoaderImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "This form actually matches the Futures.addCallback documentation:\n\n   * \u003cpre\u003e{@code\n   * ListenableFuture\u003cQueryResult\u003e future \u003d ...;\n   * Executor e \u003d ...\n   * addCallback(future,\n   *     new FutureCallback\u003cQueryResult\u003e() {\n   *       public void onSuccess(QueryResult result) {\n   *         storeInCache(result);\n   *       }\n   *       public void onFailure(Throwable t) {\n   *         reportError(t);\n   *       }\n   *     }, e);\n   * }\u003c/pre\u003e",
      "parentUuid": "b01497ef_cd45f1a8",
      "range": {
        "startLine": 51,
        "startChar": 27,
        "endLine": 51,
        "endChar": 28
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b114858e_730d5d0e",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheLoaderImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "nit: could use method reference\n\n```\nreturn Futures.transform(reloadedValue, TimedValue::new, executor);\n```",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 80
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79abdf82_6eb1cf71",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheLoaderImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b114858e_730d5d0e",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 80
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bbe64cd_a8d69209",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheTest.java",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "Should we rename this to ChronicleMapCacheTest to highlight this is now an integration test?",
      "range": {
        "startLine": 49,
        "startChar": 13,
        "endLine": 49,
        "endChar": 34
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40da9159_64c97c76",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheTest.java",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8bbe64cd_a8d69209",
      "range": {
        "startLine": 49,
        "startChar": 13,
        "endLine": 49,
        "endChar": 34
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc3d8e4d_784ca05f",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheTest.java",
        "patchSetId": 2
      },
      "lineNbr": 539,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-09-17T15:50:30Z",
      "side": 1,
      "message": "I am struggling to understand this.\nWhy having `withLoader` requires a finite expiry duration?",
      "range": {
        "startLine": 539,
        "startChar": 58,
        "endLine": 539,
        "endChar": 98
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "310e57fd_2f636bbd",
        "filename": "src/test/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheTest.java",
        "patchSetId": 2
      },
      "lineNbr": 539,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T19:02:37Z",
      "side": 1,
      "message": "I believe that was required by the Guava cache, but let me double-check.",
      "parentUuid": "cc3d8e4d_784ca05f",
      "range": {
        "startLine": 539,
        "startChar": 58,
        "endLine": 539,
        "endChar": 98
      },
      "revId": "57e323534b7822da70df4a77fe8b641c3fef91dd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}