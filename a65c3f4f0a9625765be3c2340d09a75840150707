{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "17c28b5b_3c436b83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-27T14:48:03Z",
      "side": 1,
      "message": "I agree with the approach, but the fix should be in Gerrit, even if it is just 3 lines of code.",
      "revId": "a65c3f4f0a9625765be3c2340d09a75840150707",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a18f1b6_8f413de7",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-27T14:24:55Z",
      "side": 1,
      "message": "Two points on this:\n\n1 - Is it documented somewhere that persistent caches should fallback to the inMemory cache factory rather than use any other in-memory solution?\n\n2 - If we go with this solution, then we should also fix this[1], since chronicle-map should be used for persistent-caches only. do we agree?\n\n[1] https://gerrit.googlesource.com/modules/cache-chroniclemap/+/refs/heads/master/src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheImpl.java#81",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "a65c3f4f0a9625765be3c2340d09a75840150707",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e4b9c3d_32f8047d",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-27T14:44:52Z",
      "side": 1,
      "message": "Answering to Tony:\n\n1 - Gerrit does not have internal technical documentation: the code changes too quickly and it would be obsolete in a matter of weeks or just days. The code has always implemented that logic but I agree with you it wasn\u0027t explicit in terms of visibility or interface.\n\nThe 3 lines that @Davido added make a lot of sense to me, but they are in the wrong place: they should be in the Gerrit code, so that the H2 cache could benefit from them as well.\n\nCurrently also the intent of that logic is \"hidden\" in the H2 persistent cache implementation and it wasn\u0027t obvious as both Tony and I missed it.",
      "parentUuid": "0a18f1b6_8f413de7",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "a65c3f4f0a9625765be3c2340d09a75840150707",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89bbc25_f2aaa127",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-01-27T19:55:49Z",
      "side": 1,
      "message": "\u003e If we go with this solution, then we should also fix this[1].\n\nDone.\n\n\u003e since chronicle-map should be used for persistent-caches only. do we agree?\n\nNot necessary. It could also swap the backend for memory caches using dedicated another libModule. I uploaded a follow-up change: [2] to demonstrate how to replace the backend for memory caches from Caffeine to Guava.\n\n\u003e Currently also the intent of that logic is \"hidden\" in the H2 persistent cache implementation and it wasn\u0027t obvious as both Tony and I missed it.\n\nThe issue here is to access gerrit configuration:\n\n  config.getLong(\"cache\", in.configKey(), \"diskLimit\", in.diskLimit());\n\nFor that @GerritServerConfig Config instance should be injected at some place and accessed. As you know, Guice binding shim for caches is somehow convoluted and the memory and persistent caches can also be declared by plugins. There is also a compromise to put that logic in one single place: PersistentCacheFactory that is aware of optionally persisted caches (as Tony pointed out there are currently only 3 such caches), and delegate memory cache creation to currently installed MemoryCacheFactory. Also see follow-up change, where I also replaced MemoryCacheFactory using another libModule, and now optionally persistent caches also created using custom MemoryCacheFactory, and all this from cache-chroniclemap module.\n\nI would consider this change as using the current contract and would move forward with this approach.\n\n[2] https://gerrit-review.googlesource.com/c/modules/cache-chroniclemap/+/294843",
      "parentUuid": "0e4b9c3d_32f8047d",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "a65c3f4f0a9625765be3c2340d09a75840150707",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b516d4cb_099c5711",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/ChronicleMapCacheFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-01-28T08:57:01Z",
      "side": 1,
      "message": "Thanks @David for the explanation.\nI don\u0027t think at this stage there is any real need for chronicle-map to be used for memory only cache.\n\nOne of the reasons to use chronicle-map was to alleviate the locking burden imposed by the H2 implementation, not to improve caffeine or guava performance.\n\nI suggest that we make things simple and we only use chronicle-map for persistent caches and fall back to  caffeine for in-memory.\n\nI can help moving this test forward by fixing the tests",
      "parentUuid": "b89bbc25_f2aaa127",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "a65c3f4f0a9625765be3c2340d09a75840150707",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}