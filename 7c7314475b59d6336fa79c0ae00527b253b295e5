{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9a8a85ea_c1c5ef60",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/TimedValueMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-08-02T06:59:20Z",
      "side": 1,
      "message": "nit: cacheName?",
      "range": {
        "startLine": 38,
        "startChar": 52,
        "endLine": 38,
        "endChar": 56
      },
      "revId": "7c7314475b59d6336fa79c0ae00527b253b295e5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3320e68_e3766d8f",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/TimedValueMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-08-02T08:16:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a8a85ea_c1c5ef60",
      "range": {
        "startLine": 38,
        "startChar": 52,
        "endLine": 38,
        "endChar": 56
      },
      "revId": "7c7314475b59d6336fa79c0ae00527b253b295e5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05beb505_8eb8b103",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/TimedValueMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-08-02T06:59:20Z",
      "side": 1,
      "message": "I am not sure I understand why metrics need to be `transient`.\nDoes the `TimedValueMarshaller` ever need to be serialized?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 42
      },
      "revId": "7c7314475b59d6336fa79c0ae00527b253b295e5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ccee80f_118fdd6c",
        "filename": "src/main/java/com/googlesource/gerrit/modules/cache/chroniclemap/TimedValueMarshaller.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-08-02T08:16:26Z",
      "side": 1,
      "message": "the following exceptions is being thrown in tests and Gerrit will not start:\n\n```\nnet.openhft.chronicle.bytes.util.DecoratedBufferOverflowException: writeCheckOffset failed. Offset: 16396 + adding 1\u003e writeLimit: 16396\n\tat net.openhft.chronicle.bytes.AbstractBytes.newBOERange(AbstractBytes.java:803)\n\tat net.openhft.chronicle.bytes.AbstractBytes.writeCheckOffset0(AbstractBytes.java:796)\n\tat net.openhft.chronicle.bytes.AbstractBytes.writeCheckOffset(AbstractBytes.java:786)\n\tat net.openhft.chronicle.bytes.AbstractBytes.writeOffsetPositionMoved(AbstractBytes.java:979)\n\tat net.openhft.chronicle.bytes.AbstractBytes.writeByte(AbstractBytes.java:912)\n\tat net.openhft.chronicle.bytes.AbstractBytes.writeByte(AbstractBytes.java:53)\n\tat net.openhft.chronicle.bytes.StreamingDataOutput.rawWriteByte(StreamingDataOutput.java:295)\n\tat net.openhft.chronicle.bytes.internal.BytesInternal.appendUtf8Char(BytesInternal.java:1072)\n\tat net.openhft.chronicle.bytes.StreamingDataOutput.appendUtf8(StreamingDataOutput.java:606)\n\tat net.openhft.chronicle.wire.TextWire.escape0(TextWire.java:913)\n\tat net.openhft.chronicle.wire.TextWire.escape(TextWire.java:845)\n\tat net.openhft.chronicle.wire.TextWire$TextValueOut.text(TextWire.java:1277)\n\tat net.openhft.chronicle.wire.ValueOut.text(ValueOut.java:71)\n\tat net.openhft.chronicle.wire.WireMarshaller$StringFieldAccess.getValue(WireMarshaller.java:724)\n\tat net.openhft.chronicle.wire.WireMarshaller$FieldAccess.write(WireMarshaller.java:515)\n\tat net.openhft.chronicle.wire.WireMarshaller.writeMarshallable(WireMarshaller.java:199)\n\tat net.openhft.chronicle.wire.Wires.writeMarshallable(Wires.java:359)\n\tat net.openhft.chronicle.wire.ValueOut.lambda$object$19(ValueOut.java:764)\n\tat net.openhft.chronicle.wire.TextWire$TextValueOut.marshallable(TextWire.java:1962)\n\tat net.openhft.chronicle.wire.ValueOut.object(ValueOut.java:764)\n\tat net.openhft.chronicle.wire.ValueOut.object(ValueOut.java:543)\n\tat net.openhft.chronicle.wire.WireMarshaller$ObjectFieldAccess.getValue(WireMarshaller.java:664)\n\tat net.openhft.chronicle.wire.WireMarshaller$FieldAccess.write(WireMarshaller.java:515)\n\tat net.openhft.chronicle.wire.WireMarshaller.writeMarshallable(WireMarshaller.java:199)\n\tat net.openhft.chronicle.wire.Wires.writeMarshallable(Wires.java:359)\n\tat net.openhft.chronicle.wire.ValueOut.lambda$object$19(ValueOut.java:764)\n\tat net.openhft.chronicle.wire.TextWire$TextValueOut.marshallable(TextWire.java:1962)\n\tat net.openhft.chronicle.wire.ValueOut.object(ValueOut.java:764)\n\tat net.openhft.chronicle.wire.ValueOut.untypedObject(ValueOut.java:867)\n\tat net.openhft.chronicle.wire.ValueOut.object(ValueOut.java:541)\n\tat net.openhft.chronicle.wire.WireMarshaller$ObjectFieldAccess.getValue(WireMarshaller.java:664)\n\tat net.openhft.chronicle.wire.WireMarshaller$FieldAccess.write(WireMarshaller.java:515)\n\tat net.openhft.chronicle.wire.WireMarshaller.writeMarshallable(WireMarshaller.java:199)\n\tat net.openhft.chronicle.wire.Marshallable.writeMarshallable(Marshallable.java:132)\n\tat net.openhft.chronicle.wire.TextWire$TextValueOut.marshallable(TextWire.java:1962)\n\tat net.openhft.chronicle.wire.ValueOut.typedMarshallable(ValueOut.java:432)\n\tat net.openhft.chronicle.hash.serialization.impl.ExternalBytesMarshallableDataAccess.writeMarshallable(ExternalBytesMarshallableDataAccess.java:145)\n\tat net.openhft.chronicle.wire.TextWire$TextValueOut.marshallable(TextWire.java:1962)\n\tat net.openhft.chronicle.wire.ValueOut.typedMarshallable(ValueOut.java:432)\n\tat net.openhft.chronicle.wire.ValueOut.object(ValueOut.java:680)\n\tat net.openhft.chronicle.map.VanillaChronicleMap.writeMarshallable(VanillaChronicleMap.java:162)\n\tat net.openhft.chronicle.wire.TextWire$TextValueOut.marshallable(TextWire.java:1962)\n\tat net.openhft.chronicle.wire.ValueOut.typedMarshallable(ValueOut.java:432)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.writeHeader(ChronicleMapBuilder.java:384)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.lambda$createWithFile$2(ChronicleMapBuilder.java:1721)\n\tat net.openhft.chronicle.hash.impl.util.CanonicalRandomAccessFiles.lambda$tryRunExclusively$7(CanonicalRandomAccessFiles.java:188)\n\tat net.openhft.chronicle.hash.impl.util.CanonicalRandomAccessFiles.lambda$acquire0$1(CanonicalRandomAccessFiles.java:67)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1932)\n\tat net.openhft.chronicle.hash.impl.util.CanonicalRandomAccessFiles.acquire0(CanonicalRandomAccessFiles.java:57)\n\tat net.openhft.chronicle.hash.impl.util.CanonicalRandomAccessFiles.tryRunExclusively(CanonicalRandomAccessFiles.java:175)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.createWithFile(ChronicleMapBuilder.java:1717)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.createPersistedTo(ChronicleMapBuilder.java:1586)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.createOrRecoverPersistedTo(ChronicleMapBuilder.java:1607)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.createOrRecoverPersistedTo(ChronicleMapBuilder.java:1597)\n\tat net.openhft.chronicle.map.ChronicleMapBuilder.createOrRecoverPersistedTo(ChronicleMapBuilder.java:1591)\n\tat com.googlesource.gerrit.modules.cache.chroniclemap.ChronicleMapCacheImpl.createOrRecoverStore(ChronicleMapCacheImpl.java:125)\n\tat com.googlesource.gerrit.modules.cache.chroniclemap.ChronicleMapCacheFactory.build(ChronicleMapCacheFactory.java:168)\n\tat com.googlesource.gerrit.modules.cache.chroniclemap.ChronicleMapCacheTest.newCache(ChronicleMapCacheTest.java:627)\n\tat com.googlesource.gerrit.modules.cache.chroniclemap.ChronicleMapCacheTest.newCache(ChronicleMapCacheTest.java:583)\n\tat com.googlesource.gerrit.modules.cache.chroniclemap.ChronicleMapCacheTest.newCacheWithLoader(ChronicleMapCacheTest.java:635)\n\tat com.googlesource.gerrit.modules.cache.chroniclemap.ChronicleMapCacheTest.shouldEvictRecentlyInsertedElementInCacheWhenOldestElementIsAccessed(ChronicleMapCacheTest.java:334)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat com.google.gerrit.acceptance.AbstractDaemonTest$1$1.evaluate(AbstractDaemonTest.java:241)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat com.google.testing.junit.runner.internal.junit4.CancellableRequestFactory$CancellableRunner.run(CancellableRequestFactory.java:108)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat com.google.testing.junit.runner.junit4.JUnit4Runner.run(JUnit4Runner.java:116)\n\tat com.google.testing.junit.runner.BazelTestRunner.runTestsInSuite(BazelTestRunner.java:159)\n\tat com.google.testing.junit.runner.BazelTestRunner.main(BazelTestRunner.java:85)\n```",
      "parentUuid": "05beb505_8eb8b103",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 42
      },
      "revId": "7c7314475b59d6336fa79c0ae00527b253b295e5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}